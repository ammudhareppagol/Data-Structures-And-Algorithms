The distance of a pair of integers a and b is defined as the absolute difference between a and b.
Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

Example 1:
Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.

Example 2:
Input: nums = [1,1,1], k = 2
Output: 0

Example 3:
Input: nums = [1,6,1], k = 3
Output: 5

// Solution 
 public int smallestDistancePair(int[] nums, int k) {
        int result=0;
        int n=nums.length;
       Arrays.sort(nums);
       int right = Math.abs(nums[0]-nums[n-1]);
       int left = 0;  
        while(left <= right) {
            int mid = left + (right-left)/2;
            int countPairsWhoseDiffLessThanEqualMid = countPairs(nums,mid);
            if (countPairsWhoseDiffLessThanEqualMid < k) {
                left = mid+1;
            } else {
                result = mid;
                right = mid-1;
            }
        }
        return result;

    }

    private int countPairs(int[] nums, int diff) {
        int head=0;
        int tail=1;
        int n = nums.length;
        int pairCount = 0;
        while(tail<n) {
            while(nums[tail] - nums[head] > diff)head++;
            pairCount += (tail-head);  
            tail++;
        }
        return pairCount;
    }
