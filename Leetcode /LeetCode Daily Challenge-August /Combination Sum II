Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]

// Solution
 public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        findCombinations(0,candidates, target, ans, new ArrayList<>());
        return ans;
    }
    public void findCombinations(int index, int []ar, int target, List<List<Integer>> ans, List<Integer>ds){
        if(target==0){
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=index;i<ar.length;i++){
            if(i>index && ar[i]==ar[i-1])continue;
            if(ar[i]>target) break;

            ds.add(ar[i]);
            findCombinations(i+1, ar, target-ar[i], ans, ds);
            ds.remove(ds.size()-1);
        }
    }
