/*
Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

 

(Note that in the examples below, all sequences are serializations of ListNode objects.)

Example 1:

Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.
Example 2:

Input: head = [1,2,3,-3,4]
Output: [1,2,4]
Example 3:

Input: head = [1,2,3,-3,-2]
Output: [1]
*/


// code for this Problem:

class Solution {
    public ListNode removeZeroSumSublists(ListNode head) {
        ListNode ln = new ListNode(0);
        ln.next = head;
        int prefixSum = 0;

        Map<Integer, ListNode> prefixSumToNode = new HashMap<>();
        for (ListNode current = ln; current != null; current = current.next) {
            prefixSum += current.val;
            if (prefixSumToNode.containsKey(prefixSum)) {
                ListNode prev = prefixSumToNode.get(prefixSum);
                ListNode toRemove = prev.next;
                int p = prefixSum + (toRemove != null ? toRemove.val : 0);
                while (p != prefixSum) {
                    prefixSumToNode.remove(p);
                    toRemove = toRemove.next;
                    p += (toRemove != null ? toRemove.val : 0);
                }
                prev.next = current.next;
            } else {
                prefixSumToNode.put(prefixSum, current);
            }
        }
        return ln.next;
    }
}
