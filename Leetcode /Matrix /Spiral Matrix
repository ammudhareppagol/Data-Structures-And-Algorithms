Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

//Code for this problem

public List<Integer> spiralOrder(int[][] ar) {
        List<Integer> lst = new ArrayList<>();
        int left=0, right=ar[0].length-1;
        int top=0, bottom= ar.length-1;
        while(left <= right && top <= bottom){
            for(int i=left;i<=right;i++){
                lst.add(ar[top][i]);
            }
            top++;
            for(int i=top; i<=bottom;i++){
                  lst.add(ar[i][right]);
            }
            right--;
            if (!(left <= right && top <= bottom)){
                break;
            }
            for(int i=right;i>=left;i--){
                lst.add(ar[bottom][i]);
            }
            bottom--;
            for(int i=bottom;i>=top;i--){
                lst.add(ar[i][left]);
            }
            left++;
        }
        return lst;
}


